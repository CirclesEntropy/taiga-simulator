module Simulator.Balance;

import Stdlib.Prelude open;
import Data.ByteString open;
import Simulator.Resource open;
import Simulator.Denomination open;

import Data.Map as Map;
import Stdlib.Data.Int as Int;
import Stdlib.Data.Int.Ord as Int;

type Balance :=
  | balance : List (Denomination Ã— Int) -> Balance;

emptyBalance : Balance;
emptyBalance := balance nil;

addBalance : Balance -> Balance -> Balance;
addBalance (balance xs) (balance ys) :=
  balance
    (Map.toList
      (Map.fromListWith ByteStringTraits.Ord (Int.+) (xs ++ ys)));

negateBalance : Balance -> Balance;
negateBalance (balance bs) :=
  balance (map (b in bs) second neg b);

subBalance : Balance -> Balance -> Balance;
subBalance b1 b2 := addBalance b1 (negateBalance b2);

sumBalances : List Balance -> Balance;
sumBalances bs :=
  for (acc := emptyBalance) (b in bs) addBalance acc b;

balanceIsZero : Balance -> Bool;
balanceIsZero (balance bs) := all (b in bs) snd b Int.== 0;
