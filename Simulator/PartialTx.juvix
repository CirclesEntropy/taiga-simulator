module Simulator.PartialTx;

import Stdlib.Prelude open;
import Simulator.Resource open;

type PartialTx :=
  | --- A partial transaction consists of two consumed resources and two
    --- of created resources
    partialTx : Resource × Resource
      -> Resource × Resource
      -> PartialTx;

consumedResources : PartialTx -> List Resource;
consumedResources (partialTx (r1, r2) _) := r1 :: r2 :: nil;

createdResources : PartialTx -> List Resource;
createdResources (partialTx _ (r1, r2)) := r1 :: r2 :: nil;

--- A function that determines whether a ;PartialTx; is valid
---
--- Arguments:
---
--- * kind: Indicating whether the resource associated with this logic function
--- was consumed or created in the subject ;PartialTx;.
---
--- * partialTx: The ;PartialTx; being validated.
LogicFunction : Type;
LogicFunction := ResourceKind -> PartialTx -> Bool;

module PartialTxTraits;
  import Stdlib.Trait.Ord open using {Ord as OrdTrait};

  Ord : Ord PartialTx;
  Ord :=
    let
      prod : PartialTx -> List Resource × List Resource;
      prod r := consumedResources r, createdResources r;
      listResourceOrd : OrdTrait (List Resource);
      listResourceOrd := ListTraits.Ord ResourceTraits.Ord;
      prodOrd : OrdTrait (List Resource × List Resource);
      prodOrd :=
        ProductTraits.Ord listResourceOrd listResourceOrd;
      go : PartialTx -> PartialTx -> Ordering;
      go p1 p2 := cmp prodOrd (prod p1) (prod p2);
    in mkOrd go;
end;
