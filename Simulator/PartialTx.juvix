module Simulator.PartialTx;

open import Stdlib.Prelude;
open import Simulator.Resource;

--- TODO: There should be exactly 2 created and 2 consumed resources.
type PartialTx :=
  | --- A partial transaction consists of a list of consumed resources and a list
    --- of created resources
    partialTx : List Resource -> List Resource -> PartialTx;

consumedResources : PartialTx -> List Resource;
consumedResources (partialTx rs _) := rs;

createdResources : PartialTx -> List Resource;
createdResources (partialTx _ rs) := rs;

module PartialTxTraits;

  import Stdlib.Trait.Ord as Stdlib;

  Ord : Stdlib.Ord PartialTx;
  Ord :=
    let
      prod : PartialTx -> List Resource × List Resource;
      prod (partialTx consumedRs createdRs) :=
        consumedRs, createdRs;
      listResourceOrd : Stdlib.Ord (List Resource);
      listResourceOrd := ListTraits.Ord ResourceTraits.Ord;
      prodOrd : Stdlib.Ord (List Resource × List Resource);
      prodOrd :=
        ProductTraits.Ord listResourceOrd listResourceOrd;
      go :
          Stdlib.Ord (List Resource × List Resource)
            -> PartialTx
            -> PartialTx
            -> Ordering;
      go (mkOrd prod-ord) p1 p2 := prod-ord (prod p1) (prod p2);
    in mkOrd (go prodOrd);

end;
