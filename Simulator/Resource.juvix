module Simulator.Resource;

import Stdlib.Prelude open;
import Data.ByteString open;
import Simulator.Denomination open;

import Stdlib.Data.Int as Int;

type Resource :=
  | resource : LogicHash
      -> ByteString
      -> ByteString
      -> Int
      -> Resource;

logicHash : Resource -> LogicHash;
logicHash (resource h _ _ _) := h;

staticData : Resource -> ByteString;
staticData (resource _ s _ _) := s;

dynamicData : Resource -> ByteString;
dynamicData (resource _ _ d _) := d;

quantity : Resource -> Int;
quantity (resource _ _ _ q) := q;

denomination : Resource -> Denomination;
denomination (resource l s _ _) := l :: s;

--- Find all the resources associated with a denomination
resourcesForDenom :
  Denomination -> List Resource -> List Resource;
resourcesForDenom denom rs :=
  filter
    λ {r := eq ByteStringTraits.Eq (denomination r) denom}
    rs;

--- Aggregate the quantities associated with a denomination
quantityOfDenom : Denomination -> List Resource -> Int;
quantityOfDenom denom rs :=
  for (acc := Int.ofNat 0) (r in resourcesForDenom denom rs)
    quantity r Int.+ acc;

--- Return true if the list is empty or the list has exactly 1 element and the predicate is satisfied
zeroOrOneCheck :
  (Resource -> Bool) -> List Resource -> Bool;
zeroOrOneCheck _ nil := true;
zeroOrOneCheck p (x :: nil) := p x;
zeroOrOneCheck _ _ := false;

exactlyOneCheck :
  (Resource -> Bool) -> List Resource -> Bool;
exactlyOneCheck p (x :: nil) := p x;
exactlyOneCheck _ _ := false;

type ResourceKind :=
  | created : ResourceKind
  | consumed : ResourceKind;

module ResourceKindTraits;
  Eq : Eq ResourceKind;
  Eq :=
    mkEq
      λ {
        | created created := true
        | consumed consumed := true
        | _ _ := false
      };
end;

isCreated : ResourceKind -> Bool;
isCreated := eq ResourceKindTraits.Eq created;

isConsumed : ResourceKind -> Bool;
isConsumed := eq ResourceKindTraits.Eq consumed;

module ResourceTraits;
  import Stdlib.Trait.Ord open using {Ord as OrdTrait};

  Ord : Ord Resource;
  Ord :=
    let
      prod : Resource -> Denomination × ByteString × Int;
      prod r := denomination r, dynamicData r, quantity r;
      prodOrd : OrdTrait (Denomination × ByteString × Int);
      prodOrd :=
        ProductTraits.Ord
          ByteStringTraits.Ord
          (ProductTraits.Ord ByteStringTraits.Ord IntTraits.Ord);
      go : Resource -> Resource -> Ordering;
      go r1 r2 := cmp prodOrd (prod r1) (prod r2);
    in mkOrd go;
end;
