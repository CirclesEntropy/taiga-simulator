module Simulator.Resource;

open import Stdlib.Prelude;
open import Data.ByteString;

Quantity : Type;
Quantity := Int;

LogicHash : Type;
LogicHash := Nat;

type Resource :=
  | resource : LogicHash
      -> ByteString
      -> ByteString
      -> Int
      -> Resource;

resource-ordering : Ord Resource;
resource-ordering :=
  let
    prod :
        Resource
          -> LogicHash × ByteString × ByteString × Quantity;
    prod (resource l s d q) := l, s, d, q;
    prodOrd :
        Ord (LogicHash × ByteString × ByteString × Quantity);
    prodOrd :=
            ProductTraits.Ord
        NatTraits.Ord
        (ProductTraits.Ord
          orderingByteString
          (ProductTraits.Ord orderingByteString IntTraits.Ord));
    go :
        Ord (LogicHash × ByteString × ByteString × Quantity)
          -> Resource
          -> Resource
          -> Ordering;
    go (mkOrd prod-ord) r1 r2 := prod-ord (prod r1) (prod r2);
  in mkOrd (go prodOrd);
