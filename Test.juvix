module Test;

open import Simulator;

import Data.Map as Map;
open Map using {Map};

open import Stdlib.Prelude;

import TwoPartyExchange;
open TwoPartyExchange hiding {logicFunctions};

import Sudoku;
open Sudoku hiding {logicFunctions};

open import Test.JuvixUnit;

sudoku : Test;
sudoku :=
  let
    solution : ByteString;
    solution := (1 :: 2 :: 3 :: 4 :: 3 :: 4 :: 1 :: 2 :: 2 :: 3 :: 4 :: 1 :: 4 :: 1 :: 2 :: 3 :: nil);
    puzzleDenom : Denomination;
    puzzleDenom :=
      Puzzle.mkDenomination solution;
    dealerPartialTx : PartialTx;
    dealerPartialTx :=
      dealer puzzleDenom (1 :: replicate 15 0);
    alicePartialTx : PartialTx;
    alicePartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          Puzzle.mkResource puzzleDenom (1 :: 2 :: replicate 14 0) 1
            :: Reward.mkResource 1
            :: nil;
        consumedResources : List Resource;
        consumedResources :=
          Puzzle.mkResource puzzleDenom (1 :: replicate 15 0) 1
            :: nil;
      in partialTx consumedResources createdResources;
    bobPartialTx : PartialTx;
    bobPartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          Puzzle.mkResource puzzleDenom solution 0
            :: Reward.mkResource 14
            :: nil;
        consumedResources : List Resource;
        consumedResources :=
          Puzzle.mkResource puzzleDenom (1 :: 2 :: replicate 14 0) 1
            :: DealerIntent.mkResource puzzleDenom 1
            :: nil;
      in partialTx consumedResources createdResources;
    txs : List PartialTx;
    txs :=
      dealerPartialTx :: alicePartialTx :: bobPartialTx :: nil;
  in testCase
    "Sudoku"
    (assertTrue
      "expected Sudoku solutions to validate"
      (checkTransaction (Sudoku.logicFunctions puzzleDenom) txs));

twoPartyExchange : Test;
twoPartyExchange :=
  let
    alicePartialTx : PartialTx;
    alicePartialTx :=
      let
        createdResources : List Resource;
        createdResources := AliceIntent.mkResource 1 :: nil;
        consumedResources : List Resource;
        consumedResources :=
          A.mkResource 1 :: B.mkResource 2 :: nil;
      in partialTx consumedResources createdResources;
    bobPartialTx : PartialTx;
    bobPartialTx :=
      let
        createdResources : List Resource;
        createdResources := A.mkResource 1 :: nil;
        consumedResources : List Resource;
        consumedResources := Dolphin.mkResource 1 :: nil;
      in partialTx consumedResources createdResources;
    solverPartialTx : PartialTx;
    solverPartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          Dolphin.mkResource 1 :: B.mkResource 2 :: nil;
        consumedResources : List Resource;
        consumedResources := AliceIntent.mkResource 1 :: nil;
      in partialTx consumedResources createdResources;
    txs : List PartialTx;
    txs :=
      alicePartialTx :: bobPartialTx :: solverPartialTx :: nil;
  in testCase
    "two party exchange"
    (assertTrue
      "expected two-party exchange transactions to validate"
      (checkTransaction TwoPartyExchange.logicFunctions txs));

emptyTest : Test;
emptyTest :=
  let
    emptyFunctions : Map LogicHash LogicFunction;
    emptyFunctions := Map.empty;
  in testCase
    "The empty set of partial transactions validates"
    (assertTrue
      "expected transactions to validate"
      (checkTransaction emptyFunctions nil));

tests : List Test;
tests := emptyTest :: twoPartyExchange :: sudoku :: nil;

main : IO;
main := runTestSuite (testSuite "Taiga simulator" tests);
