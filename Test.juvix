module Test;

open import Simulator;

import Data.Set as Set;
open Set using {Set};

import Data.Map as Map;
open Map using {Map};

open import Stdlib.Prelude;

import TwoPartyExchange;
open TwoPartyExchange hiding {logicFunctions};

open import Test.JuvixUnit;

twoPartyExchange : Test;
twoPartyExchange :=
  let
    alicePartialTx : PartialTx;
    alicePartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          resource AliceIntent.hash nil nil 1 :: nil;
        consumedResources : List Resource;
        consumedResources :=
          resource A.hash A.staticData nil 1
            :: resource B.hash B.staticData nil 2
            :: nil;
      in partialTx
        (Set.fromList resource-ordering consumedResources)
        (Set.fromList resource-ordering createdResources);
    bobPartialTx : PartialTx;
    bobPartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          resource A.hash A.staticData nil 1 :: nil;
        consumedResources : List Resource;
        consumedResources :=
          resource Dolphin.hash Dolphin.staticData nil 1 :: nil;
      in partialTx
        (Set.fromList resource-ordering consumedResources)
        (Set.fromList resource-ordering createdResources);
    solverPartialTx : PartialTx;
    solverPartialTx :=
      let
        createdResources : List Resource;
        createdResources :=
          resource Dolphin.hash Dolphin.staticData nil 1
            :: resource B.hash B.staticData nil 2
            :: nil;
        consumedResources : List Resource;
        consumedResources :=
          resource AliceIntent.hash nil nil 1 :: nil;
      in partialTx
        (Set.fromList resource-ordering consumedResources)
        (Set.fromList resource-ordering createdResources);
    txs : Set PartialTx;
    txs :=
      Set.fromList
        partialtx-ordering
        (alicePartialTx :: bobPartialTx :: solverPartialTx :: nil);
  in testCase
    "two party exchange"
    (assertTrue
      "expected two-party exchange transactions to validate"
      (checkTransaction TwoPartyExchange.logicFunctions txs));

emptyTest : Test;
emptyTest :=
  let
    emptyFunctions : Map LogicHash LogicFunction;
    emptyFunctions := Map.empty;
    emptyTxs : Set PartialTx;
    emptyTxs := Set.empty;
  in testCase
    "The empty set of partial transactions validates"
    (assertTrue
      "expected transactions to validate"
      (checkTransaction emptyFunctions emptyTxs));

tests : List Test;
tests := emptyTest :: twoPartyExchange :: nil;

main : IO;
main := runTestSuite (testSuite "Taiga simulator" tests);
