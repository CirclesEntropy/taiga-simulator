module Sudoku.Serializer;

open import Sudoku.Grid;
open import Data.ByteString;

open import Stdlib.Prelude;
open import Data.ListTmp;

open import Stdlib.Data.Nat.Ord;
open import Stdlib.Debug.Fail;

--- Encode a Sudoku ;Grid; to a ;ByteString;
encode : Grid -> ByteString;
encode := gridEntries;

--- Compute the largest ;Nat; that is less than or equal to the input ;Nat;.
floorSquareRoot : Nat -> Nat;
floorSquareRoot zero := zero;
floorSquareRoot n :=
  let
    terminating
    go : Nat -> Nat;
    go a :=
      let
        b : Nat := div (a + div n a) 2;
      in if (a > b) (go b) a;
  in go n;

--- Partial function that computes a square root. If the input ;Nat; is not a
--- square number then fail.
checkSquareRoot : Nat -> Nat;
checkSquareRoot n :=
   let root : Nat := floorSquareRoot n;
   in
     if (root * root == n) root (fail "checkSquareRoot: not a square number");

--- Decode a Sudoku ;Grid; from a ;ByteString;
decode : ByteString -> Grid;
decode bs :=
   let
     gridWidth : Nat := checkSquareRoot (length bs);
     subGridWidth : Nat := checkSquareRoot gridWidth;
     decodeSubGrid : List Nat -> SubGrid;
     decodeSubGrid := subGrid ∘ chunksOf subGridWidth;
     decodeSubGrids : List Nat -> List SubGrid;
     decodeSubGrids := map decodeSubGrid ∘ chunksOf gridWidth;
   in
     grid (chunksOf subGridWidth (decodeSubGrids bs));
