-- Taiga two party exchange example
-- https://github.com/anoma/taiga/blob/main/book/src/exec_examples.md#1-two-party-exchange-with-an-intent-uservp
module TwoPartyExchange;

open import Simulator;

import Data.Set as Set;
open Set using {Set};

import Data.Map as Map;
open Map using {Map};

import Data.MapTmp as Map;

open import Stdlib.Prelude;

import Stdlib.Data.Nat.Ord as Nat;
import Stdlib.Data.Int.Ord as Int;

module Dolphin;

  hash : LogicHash;
  hash := 0;

  staticData : ByteString;
  staticData := nil;

  denom : ByteString;
  denom := hash :: staticData;

  mkResource : Int -> Resource;
  mkResource := resource hash staticData nil;

end;

module A;

  hash : LogicHash;
  hash := 1;

  staticData : ByteString;
  staticData := nil;

  denom : ByteString;
  denom := hash :: staticData;

  mkResource : Int -> Resource;
  mkResource := resource hash staticData nil;

end;

module B;

  hash : LogicHash;
  hash := 2;

  staticData : ByteString;
  staticData := nil;

  denom : ByteString;
  denom := hash :: staticData;

  mkResource : Int -> Resource;
  mkResource := resource hash staticData nil;
end;

module AliceIntent;

  logicFunction : LogicFunction;
  logicFunction h consumedRs createdRs :=
    -- check if the resource associated to this logic function is among the created (output)
    -- resources.
    -- Then check if alice's intent is satisfied.
    let
      createdRsList : List Resource;
      createdRsList := Set.toList createdRs;
      createdHashes : List LogicHash;
      createdHashes := map hash createdRsList;
    in any ((Nat.==) h) createdHashes
      || quantityOfDenom Dolphin.denom createdRsList Int.== 1
      && quantityOfDenom A.denom createdRsList Int.== 1
      || quantityOfDenom Dolphin.denom createdRsList Int.== 1
      && quantityOfDenom B.denom createdRsList Int.== 2;

  hash : LogicHash;
  hash := 3;

  mkResource : Int -> Resource;
  mkResource := resource hash nil nil;

end;

logicFunctions : Map LogicHash LogicFunction;
logicFunctions :=
  Map.fromList
    NatTraits.Ord
    ((A.hash, alwaysValid)
      :: (B.hash, alwaysValid)
      :: (Dolphin.hash, alwaysValid)
      :: (AliceIntent.hash, AliceIntent.logicFunction)
      :: nil);
