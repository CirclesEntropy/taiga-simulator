-- Taiga two party exchange example
-- https://github.com/anoma/taiga/blob/main/book/src/exec_examples.md#1-two-party-exchange-with-an-intent-uservp
module TwoPartyExchange;

open import Simulator;

import Simulator.Denomination as D;

import Data.Map as Map;
open Map using {Map};

import Data.MapTmp as Map;

open import Stdlib.Prelude;

open import Stdlib.Data.Int.Ord;

module Dolphin;

  denomination : Denomination;
  denomination := D.denomination 0 nil;

  mkResource : Int -> Resource;
  mkResource := resource denomination nil;

end;

module A;

  denomination : Denomination;
  denomination := D.denomination 1 nil;

  mkResource : Int -> Resource;
  mkResource := resource denomination nil;

end;

module B;

  denomination : Denomination;
  denomination := D.denomination 2 nil;

  mkResource : Int -> Resource;
  mkResource := resource denomination nil;
end;

module AliceIntent;

  logicFunction : LogicFunction;
  logicFunction kind tx :=
    -- check if the resource associated to this logic function is among the created (output)
    -- resources.
    -- Then check if alice's intent is satisfied.
    let
      createdRs : List Resource;
      createdRs := createdResources tx;
      createdHashes : List LogicHash;
      createdHashes := map (logicHash âˆ˜ denomination') createdRs;
    in isCreated kind
      || quantityOfDenom Dolphin.denomination createdRs == 1
      && quantityOfDenom A.denomination createdRs == 1
      || quantityOfDenom Dolphin.denomination createdRs == 1
      && quantityOfDenom B.denomination createdRs == 2;

  denomination : Denomination;
  denomination := D.denomination 3 nil;

  mkResource : Int -> Resource;
  mkResource := resource denomination nil;

end;

logicFunctions : Map LogicHash LogicFunction;
logicFunctions :=
  Map.fromList
    NatTraits.Ord
    ((logicHash A.denomination, alwaysValid)
      :: (logicHash B.denomination, alwaysValid)
      :: (logicHash Dolphin.denomination, alwaysValid)
      :: (logicHash AliceIntent.denomination
        , AliceIntent.logicFunction)
      :: nil);
