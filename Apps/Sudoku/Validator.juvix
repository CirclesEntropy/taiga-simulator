module Apps.Sudoku.Validator;

open import Stdlib.Prelude;
open import Data.ByteString;

open import Stdlib.Data.Nat.Ord;

open import Apps.Sudoku.Grid public;
open import Apps.Sudoku.Extra;

--- Check that the number of rows equals the number of columns
square? : {A : Type} -> List (List A) -> Bool;
square? nil := true;
square? rows@(r :: rs) :=
  allEq NatTraits.Eq (map length rows)
    && length r == length rows;

entryFilled? : Nat -> Bool;
entryFilled? x := x > 0;

allFilled? : List Nat -> Bool;
allFilled? := null ∘ filter (not ∘ entryFilled?);

--- Check that there are no duplicate filled entries
noDuplicates? : List Nat -> Bool;
noDuplicates? :=
  not ∘ hasDuplicates NatTraits.Ord ∘ filter entryFilled?;

--- Check that a subgrid satisfies the Sudoku constraints
validSubGrid? : SubGrid -> Bool;
validSubGrid? s@(subGrid rows) :=
  let
    entries : List Nat := subGridEntries s;
  in square? rows
    && noDuplicates? (subGridEntries s)
    && all
      λ {
        | x := x < length entries + 1
      }
      entries;

--- Check that a subgrid is complete. i.e it satisfies the Sudoku constraints
--- and all of its entries are filled
completeSubGrid? : SubGrid -> Bool;
completeSubGrid? sg :=
  validSubGrid? sg && allFilled? (subGridEntries sg);

--- Check that a grid satisfies the Sudoku constraints
validGrid? : Grid -> Bool;
validGrid? g@(grid subGridRows) :=
  let
    subGrids : List SubGrid := flatten subGridRows;
    rows : List (List Nat) := gridRows g;
    columns : List (List Nat) := transpose rows;
  in all validSubGrid? subGrids
    && square? subGridRows
    && all noDuplicates? rows
    && all noDuplicates? columns;

--- Check that a grid is complete. i.e it satisfies the Sudoku constraints
--- and all of its entries are filled
completeGrid? : Grid -> Bool;
completeGrid? g :=
  validGrid? g && allFilled? (gridEntries g);
