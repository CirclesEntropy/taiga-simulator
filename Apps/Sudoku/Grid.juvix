module Apps.Sudoku.Grid;

import Stdlib.Prelude open;
import Data.ByteString open;
import Apps.Sudoku.Extra open;

import Stdlib.Data.Nat.Ord open;

--- A Sudoku subgrid
type SubGrid :=
  | subGrid : List (List Nat) -> SubGrid;

subGridEntries : SubGrid -> List Nat;
subGridEntries (subGrid rows) := flatten rows;

--- The rows of ;SubGrid;s that comprise a Sudoku grid.
type Grid :=
  | grid : List (List SubGrid) -> Grid;

gridEntries : Grid -> List Nat;
gridEntries (grid sgs) :=
  flatten (concatMap (map subGridEntries) sgs);

gridRows : Grid -> List (List Nat);
gridRows (grid rows) :=
  let
    combineSubGridRows :
      List (List Nat) -> SubGrid -> List (List Nat);
    combineSubGridRows rs1 (subGrid rs2) :=
      zipWith (++) rs1 rs2;
    combineRows : List SubGrid -> List (List Nat);
    combineRows nil := nil;
    combineRows (subGrid rs :: sgs) :=
      foldl combineSubGridRows rs sgs;
  in concatMap combineRows rows;

gridEq : Eq Grid;
gridEq :=
  mkEq
    λ {g1 g2 :=
      eq
        (ListTraits.Eq (ListTraits.Eq NatTraits.Eq))
        (gridRows g1)
        (gridRows g2)};

prettyGrid : Grid -> String;
prettyGrid g@(grid (sg@(subGrid (r :: _) :: _) :: _)) :=
  let
    subGridWidth : Nat := length r;
    numSubGrids : Nat := length sg;
    showSquare : Nat -> String;
    showSquare zero := "   ";
    showSquare n := " " ++str natToString n ++str " ";
    showSplitRow : List Nat -> String;
    showSplitRow := concatStr ∘ map showSquare;
    showRow : Nat -> List Nat -> String;
    showRow subGridWidth xs :=
      concatStr
        (surround
          "|"
          (map showSplitRow (chunksOf subGridWidth xs)));
    showRowChunk : Nat -> List (List Nat) -> String;
    showRowChunk subGridWidth xs :=
      unlines (map (showRow subGridWidth) xs);
  in case gridRows g
    | nil := ""
    | xs@(x :: _) :=
      let
        oneSquareWidth : Nat := 3;
        borderOneSubgrid :
          String :=
            concatStr (replicate (oneSquareWidth * subGridWidth) "-")
              ++str "+";
        border :
          String :=
            "+"
              ++str concatStr (replicate numSubGrids borderOneSubgrid);
      in unlines
        (surround
          border
          (map
            (showRowChunk subGridWidth)
            (chunksOf subGridWidth xs)));
prettyGrid _ := "";
