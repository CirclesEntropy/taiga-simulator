module Apps.Sudoku.Grid;

open import Stdlib.Prelude;
open import Data.ByteString;
open import Apps.Sudoku.Extra;

open import Stdlib.Data.Nat.Ord;

--- A Sudoku subgrid
type SubGrid :=
  | subGrid : List (List Nat) -> SubGrid;

subGridEntries : SubGrid -> List Nat;
subGridEntries (subGrid rows) := flatten rows;

--- The rows of ;SubGrid;s that comprise a Sudoku grid.
type Grid :=
  | grid : List (List SubGrid) -> Grid;

gridEntries : Grid -> List Nat;
gridEntries (grid sgs) :=
  flatten (concatMap (map subGridEntries) sgs);

gridRows : Grid -> List (List Nat);
gridRows (grid rows) :=
  let
    combineSubGridRows :
        List (List Nat) -> SubGrid -> List (List Nat);
    combineSubGridRows rs1 (subGrid rs2) :=
      zipWith (++) rs1 rs2;
    combineRows : List SubGrid -> List (List Nat);
    combineRows nil := nil;
    combineRows (subGrid rs :: sgs) :=
      foldl combineSubGridRows rs sgs;
  in concatMap combineRows rows;

gridEq : Eq Grid;
gridEq :=
  mkEq
    Î» {
      | g1 g2 :=
        eq
          (ListTraits.Eq (ListTraits.Eq NatTraits.Eq))
          (gridRows g1)
          (gridRows g2)
    };

showSquare : Nat -> String;
showSquare zero := "   ";
showSquare n := " " ++str natToString n ++str " ";

showRow : List Nat -> String;
showRow xs := concatStr (surround "|" (map showSquare xs));

prettyGrid : Grid -> String;
prettyGrid g :=
  case gridRows g
    | nil := ""
    | xs@(x :: _) :=
      let
        border :
            String :=
              "+" ++str concatStr (replicate (length x) "---+");
      in unlines (surround border (map showRow xs));
