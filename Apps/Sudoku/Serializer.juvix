module Apps.Sudoku.Serializer;

open import Apps.Sudoku.Grid;
open import Apps.Sudoku.Extra;
open import Data.ByteString;

open import Stdlib.Prelude;

open import Stdlib.Data.Nat.Ord;
open import Stdlib.Debug.Fail;

--- Encode a Sudoku ;Grid; to a ;ByteString;
encode : Grid -> ByteString;
encode := flatten ∘ gridRows;

--- Compute the largest ;Nat; that is less than or equal to the input ;Nat;.
floorSquareRoot : Nat -> Nat;
floorSquareRoot zero := zero;
floorSquareRoot n :=
  let
    terminating
    go : Nat -> Nat;
    go a :=
      let
        b : Nat := div (a + div n a) 2;
      in if (a > b) (go b) a;
  in go n;

--- Partial function that computes a square root. If the input ;Nat; is not a
--- square number then fail.
checkSquareRoot : Nat -> Nat;
checkSquareRoot n :=
  let
    root : Nat := floorSquareRoot n;
  in if
    (root * root == n)
    root
    (fail "checkSquareRoot: not a square number");

--- Decode a Sudoku ;Grid; from a ;ByteString;
decode : ByteString -> Grid;
decode bs :=
  let
    gridWidth : Nat := checkSquareRoot (length bs);
    subGridWidth : Nat := checkSquareRoot gridWidth;
    rows : List (List Nat) := chunksOf gridWidth bs;
    split : {A : Type} -> List A -> List (List A);
    split := chunksOf subGridWidth;
    pack : List (List Nat) -> List (List (List (List Nat)));
    pack := split ∘ map split;
    unpack : List (List (List (List Nat))) -> List (List Nat);
    unpack := map flatten ∘ flatten;
    subGrids : List (List Nat) -> List (List Nat);
    subGrids := unpack ∘ map transpose ∘ pack;
    decodeSubGrid : List Nat -> SubGrid;
    decodeSubGrid := subGrid ∘ chunksOf subGridWidth;
  in grid
    (chunksOf subGridWidth (map decodeSubGrid (subGrids rows)));
