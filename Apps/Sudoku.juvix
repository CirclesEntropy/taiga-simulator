-- Taiga Sudoku example
-- https://hackmd.io/DlCNpl4KRJq2j5dRTiUrFA
module Apps.Sudoku;

import Simulator open;

import Apps.Sudoku.Validator as Sudoku;
import Apps.Sudoku.Serializer as Sudoku;

import Simulator.Denomination as D;

import Data.Map as Map;
open Map using {Map};

import Stdlib.Prelude open;

import Stdlib.Data.Int.Ord open;

import Stdlib.Data.Nat.Ord as Nat;

module AlwaysValid;
  logicFunction : LogicFunction;
  logicFunction := λ {_ _ := true};

  --- This will be computed from the logic function
  logicHash : LogicHash;
  logicHash := 0;
end;

module Reward;
  staticData : ByteString;
  staticData := 0 :: nil;

  mkResource : Int -> Resource;
  mkResource := resource AlwaysValid.logicHash staticData nil;

  denomination : Denomination;
  denomination := AlwaysValid.logicHash :: staticData;
end;

module Sudoku;
  type Data :=
    | puzzleData : LogicHash -> ByteString -> Data;

  logicHash : Data -> LogicHash;
  logicHash (puzzleData l _) := l;

  mkResource : Data -> ByteString -> Int -> Resource;
  mkResource (puzzleData logicHash solution) :=
    resource logicHash solution;

  denomination : Data -> Denomination;
  denomination (puzzleData l s) := l :: s;

  solvedSquares : ByteString -> Nat;
  solvedSquares proposal :=
    length (filter λ {x := x Nat.> 0} proposal);

  --- Checks the solution state transition.
  ---
  --- * The consumed puzzle represents a valid Sudoku grid
  ---
  --- * If there is a consumed puzzle resource then there is exacly
  --- one created puzzle resource and exacly one created reward resource.
  ---
  --- * The size of the solution doesn't change.
  ---
  --- * The number of filled in squares does not decrease.
  ---
  --- * The claimed reward is equal to the number of newly filled in squares.
  ---
  --- * The only squares that change between the consumed and created solutinos
  --- are changes from zero (i.e unfilled) to non-zero (i.e filled).
  logicFunction : Data -> LogicFunction;
  logicFunction data kind tx :=
    let
      createdRs : List Resource;
      createdRs := createdResources tx;
      consumedRs : List Resource;
      consumedRs := consumedResources tx;
      checkTransition : Resource -> Bool;
      checkTransition consumedR :=
        let
          checkCreated : Resource -> Bool;
          checkCreated createdR :=
            let
              checkReward : Resource -> Bool;
              checkReward rewardR :=
                let
                  createdSol : ByteString;
                  createdSol := dynamicData createdR;
                  consumedSol : ByteString;
                  consumedSol := dynamicData consumedR;
                  diff : List (Nat × Nat);
                  diff :=
                    filter
                      λ {(x, y) := x Nat./= y}
                      (zip consumedSol createdSol);
                  rewardQ : Int;
                  rewardQ := quantity rewardR;
                in length createdSol Nat.== length consumedSol
                  && solvedSquares createdSol Nat.>= solvedSquares consumedSol
                  && Sudoku.validGrid? (Sudoku.decode createdSol)
                  && all λ {x := x Nat.== 0} (map fst diff)
                  && ofNat (length diff) == rewardQ;
            in exactlyOneCheck
              checkReward
              (resourcesForDenom Reward.denomination createdRs);
        in exactlyOneCheck
          checkCreated
          (resourcesForDenom (denomination data) createdRs);
    in isCreated kind
      || zeroOrOneCheck
        checkTransition
        (resourcesForDenom (denomination data) consumedRs);
end;

module DealerIntent;
  logicFunction : Sudoku.Data -> LogicFunction;
  logicFunction p@(Sudoku.puzzleData _ solution) kind tx :=
    let
      createdRs : List Resource;
      createdRs := createdResources tx;
      checkPuzzle : Resource -> Bool;
      checkPuzzle r :=
        eq ByteStringTraits.Eq solution (dynamicData r);
    in isCreated kind
      || zeroOrOneCheck
        checkPuzzle
        (resourcesForDenom (Sudoku.denomination p) createdRs);

  logicHash : Sudoku.Data -> LogicHash;
  logicHash _ := 2;

  staticData : Sudoku.Data -> ByteString;
  staticData _ := 2 :: nil;

  denomination : Sudoku.Data -> Denomination;
  denomination d := logicHash d :: staticData d;

  mkResource : Sudoku.Data -> Int -> Resource;
  mkResource d := resource (logicHash d) (staticData d) nil;
end;

dealer : Sudoku.Data -> ByteString -> PartialTx;
dealer puzzleData initialBoard :=
  let
    emptySquares : Int;
    emptySquares :=
      ofNat (length (filter λ {s := s Nat.== 0} initialBoard));
    consumedResources : List Resource;
    consumedResources := Reward.mkResource emptySquares :: nil;
    createdResources : List Resource;
    createdResources :=
      DealerIntent.mkResource puzzleData 1
        :: Sudoku.mkResource puzzleData initialBoard 1
        :: nil;
  in partialTx consumedResources createdResources;

logicFunctions : Sudoku.Data -> Map LogicHash LogicFunction;
logicFunctions puzzleData :=
  Map.fromList
    NatTraits.Ord
    ((AlwaysValid.logicHash, AlwaysValid.logicFunction)
      :: (Sudoku.logicHash puzzleData
        , Sudoku.logicFunction puzzleData)
      :: (DealerIntent.logicHash puzzleData
        , DealerIntent.logicFunction puzzleData)
      :: nil);
