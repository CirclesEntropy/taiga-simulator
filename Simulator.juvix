module Simulator;

import Simulator.Resource open public;
import Simulator.Balance open public;
import Simulator.PartialTx open public;
import Simulator.Denomination open public;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Data.ByteString open public;

import Data.Map as Map;
open Map using {Map};

--- A function that determines whether a ;PartialTx; is valid
---
--- Arguments:
---
--- * kind: Indicating whether the resource associated with this logic function
--- was consumed or created in the subject ;PartialTx;.
---
--- * partialTx: The ;PartialTx; being validated.
LogicFunction : Type;
LogicFunction := ResourceKind -> PartialTx -> Bool;

validPartialTx :
  Map LogicHash LogicFunction -> PartialTx -> Bool;
validPartialTx m tx :=
  let
    getLogicFn :
      ResourceKind -> Resource -> PartialTx -> Bool;
    getLogicFn kind res :=
      let
        hash : LogicHash := logicHash res;
      in case Map.lookup NatTraits.Ord hash m
        | just f := f kind
        | _ :=
          fail
            ("Could not find function associated with hash: "
              ++str natToString hash);
  in all
      λ {r := getLogicFn created r tx}
      (createdResources tx)
    && all
      λ {r := getLogicFn consumed r tx}
      (consumedResources tx);

mkBalance : Resource -> Balance;
mkBalance r :=
  balance ((denomination r, quantity r) :: nil);

balanceDelta : PartialTx -> Balance;
balanceDelta tx :=
  subBalance
    (sumBalances (map mkBalance (consumedResources tx)))
    (sumBalances (map mkBalance (createdResources tx)));

checkTransaction :
  Map LogicHash LogicFunction -> List PartialTx -> Bool;
checkTransaction m ptxs :=
  let
    allValid : Bool := all (validPartialTx m) ptxs;
    sumDeltasIsZero :
      Bool :=
        balanceIsZero (sumBalances (map balanceDelta ptxs));
  in allValid && sumDeltasIsZero;
